var PodsUI = (function () {
  'use strict';

  var babelHelpers = {};
  babelHelpers.typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };
  babelHelpers;

  var fileUploadQueue = "<ul class=\"pods-file-meta media-item\">\n\t<% if ( '' === error_msg ) { %>\n\t\t<li class=\"pods-file-col pods-progress\"><div class=\"progress-bar\" style=\"width: <%- progress %>%;\"></div></li>\n\t<% } %>\n\t<li class=\"pods-file-col pods-file-name\"><%- filename %></li>\n</ul>\n<% if ( '' !== error_msg ) { %>\n\t<div class=\"error\"><%- error_msg %></div>\n<% } %>\n";

  var FileUploadQueueModel = Backbone.Model.extend({
  	defaults: {
  		id: 0,
  		filename: '',
  		progress: 0,
  		error_msg: ''
  	}
  });

  /**
   *
   */
  var FileUploadQueueItem = Mn.LayoutView.extend({
  	model: FileUploadQueueModel,

  	tagName: 'li',

  	template: _.template(fileUploadQueue),

  	attributes: function attributes() {
  		return {
  			class: 'pods-file',
  			id: this.model.get('id')
  		};
  	},

  	modelEvents: {
  		'change': 'onModelChanged'
  	},

  	onModelChanged: function onModelChanged() {
  		this.render();
  	}

  });

  /**
   *
   */
  var FileUploadQueue = Mn.CollectionView.extend({
  	tagName: 'ul',

  	className: 'pods-files pods-files-queue',

  	childView: FileUploadQueueItem
  });

var Queue = Object.freeze({
  	FileUploadQueueModel: FileUploadQueueModel,
  	FileUploadQueueItem: FileUploadQueueItem,
  	FileUploadQueue: FileUploadQueue
  });

  var fileUploadLayout = "<div class=\"pods-ui-file-list\"></div>\n<div class=\"pods-ui-region\"></div>\n<div class=\"pods-ui-form\"></div>\n";

  /*global jQuery, _, Backbone, Mn */
  /**
   *
   */
  var FileUploadModel = Backbone.Model.extend({
  	defaults: {
  		'id': 0,
  		'icon': '',
  		'name': '',
  		'link': ''
  	}
  });

  /**
   *
   */
  var FileUploadCollection = Backbone.Collection.extend({
  	model: FileUploadModel,

  	field_meta: {},

  	initialize: function initialize(models, field_meta) {
  		this.field_meta = field_meta || {};
  		this.field_meta.field_options = this.field_meta.field_options || {};

  		// add() will always be called once per model in the collection
  		this.listenTo(this, 'add', this.onCollectionAdd);
  	},

  	onCollectionAdd: function onCollectionAdd(model, collection, options) {
  		this.truncateToFileLimit(this.field_meta.field_options.file_limit);
  	},

  	truncateToFileLimit: function truncateToFileLimit(limit) {
  		var first_model;

  		if (limit != 0 && this.length > limit) {

  			// We've gone over the item limit, so destroy the top (oldest) item, LIFO-style
  			// Note: calling destroy() directly on the model will send a REST DELETE request, this bypasses that behavior
  			first_model = this.at(0);
  			first_model.trigger('destroy', first_model);
  		}
  	}

  });

  var fileUploadItem = "<input\n\tname=\"<%- attr.name %>[<%- id %>][id]\"\n\tdata-name-clean=\"<%- attr.name_clean %>-id\"\n\tid=\"<%- attr.id %>-<%- id %>-id\"\n\tclass=\"<%- attr.class %>\"\n\ttype=\"hidden\"\n\tvalue=\"<%- id %>\" />\n<ul class=\"pods-file-meta media-item\">\n\t<% if ( 1 != options.file_limit ) { %>\n\t\t<li class=\"pods-file-col pods-file-handle\">Handle</li>\n\t<% } %>\n\t<li class=\"pods-file-col pods-file-icon\"><img class=\"pinkynail\" src=\"<%- icon %>\" alt=\"Icon\"></li>\n\t<li class=\"pods-file-col pods-file-name\">\n\t\t<% if ( 0 != options.file_edit_title ) { %>\n\t\t\t<input\n\t\t\t\tname=\"<%- attr.name %>[<%- id %>][title]\"\n\t\t\t\tdata-name-clean=\"<%- attr.name_clean %>-title\"\n\t\t\t\tid=\"pods-form-ui-<%- attr.name_clean %>-<%- id %>-title\"\n\t\t\t\tclass=\"pods-form-ui-field-type-text pods-form-ui-field-name-<%- attr.name_clean %>-title\"\n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue=\"<%- name %>\"\n\t\t\t\ttabindex=\"2\"\n\t\t\t\tmaxlength=\"255\" />\n\t\t<% } else { %>\n\t\t\t<%- name %>\n\t\t<% } %>\n\t</li>\n\t<li class=\"pods-file-col pods-file-remove pods-file-delete\"><a href=\"#remove\">Remove</a></li>\n\t<% if ( 0 != options.file_linked ) { %>\n\t\t<li class=\"pods-file-col pods-file-download\"><a href=\"<%- link %>\" target=\"_blank\">Download</a></li>\n\t<% } %>\n</ul>\n";

  /*global jQuery, _, Backbone, Mn */

  /**
   *
   */
  var PodsFieldListView = Mn.CollectionView.extend({
  	initialize: function initialize(options) {
  		this.fieldModel = options.fieldModel;
  		this.childViewOptions = { fieldModel: options.fieldModel };
  	}
  });

  /**
   *
   */
  var PodsFieldView = Mn.LayoutView.extend({
  	serializeData: function serializeData() {
  		var fieldModel = this.options.fieldModel;
  		var data = this.model ? this.model.toJSON() : {};

  		data.field_type = fieldModel.get('type');
  		data.attr = fieldModel.get('attributes');
  		data.options = fieldModel.get('options');

  		return data;
  	}
  });

  /**
   * Individual list items, representing a single file
   */
  var FileUploadItem = PodsFieldView.extend({
  	tagName: 'li',

  	className: 'pods-file',

  	ui: {
  		drag_handle: '.pods-file-handle',
  		download_link: '.pods-file-download',
  		remove_button: '.pods-file-remove'
  	},

  	template: _.template(fileUploadItem),

  	triggers: {
  		'click @ui.remove_button': 'remove:file:click'
  	}
  });

  /**
   * The file list container
   */
  var FileUploadList = PodsFieldListView.extend({
  	tagName: 'ul',

  	className: 'pods-files pods-files-list',

  	childView: FileUploadItem,

  	onAttach: function onAttach() {
  		var fieldOptions = this.options.fieldModel.get('options');

  		// @todo
  		// http://stackoverflow.com/questions/1735372/jquery-sortable-list-scroll-bar-jumps-up-when-sorting/4187833#4187833

  		if (1 != fieldOptions.file_limit) {
  			// init sortable
  			this.$el.sortable({
  				containment: 'parent',
  				axis: 'y',
  				scrollSensitivity: 40,
  				tolerance: 'pointer',
  				opacity: 0.6
  			});
  		}
  	}
  });

  var fileUploadForm = "<a class=\"button pods-file-add pods-media-add\" href=\"#\" tabindex=\"2\"><%= options.file_add_button %></a>";

  var FileUploadForm = PodsFieldView.extend({
  	tagName: 'div',

  	ui: {
  		add_button: '.pods-file-add'
  	},

  	template: _.template(fileUploadForm),

  	triggers: {
  		'click @ui.add_button': 'add:file:click'
  	}
  });

  /*global jQuery, _, Backbone, Mn */
  /**
   *
   * @param {Object} options
   *
   * @param {Object} options.browse_button   Existing and attached DOM node
   * @param {Object} options.ui_region       Marionette.Region object
   * @param {Object} options.field_options
   *
   * @param {string} options.field_options.file_modal_title
   * @param {string} options.field_options.file_modal_add_button
   * @param {string} options.field_options.file_limit
   * @param {string} options.field_options.limit_extensions
   * @param {string} options.field_options.limit_types
   * @param {string} options.field_options.file_attachment_tab
   *
   * @param {Object} options.field_options.plupload_init
   * @param {Object} options.field_options.plupload_init.browse_button
   *
   * @class
   */
  var PodsFileUploader = Mn.Object.extend({

    constructor: function constructor(options) {
      // Magically set the object properties we need, they'll just "be there" for the concrete instance
      this.browse_button = options.browse_button;
      this.ui_region = options.ui_region;
      this.field_options = options.field_options;

      Mn.Object.call(this, options);
    }

  });

  var Plupload = PodsFileUploader.extend({
  	plupload: {},

  	fileUploader: 'plupload',

  	initialize: function initialize() {
  		// Set the browse button argument for plupload... it's required
  		this.field_options.plupload_init.browse_button = this.browse_button;

  		this.plupload = new plupload.Uploader(this.field_options.plupload_init);
  		this.plupload.init();

  		// Setup all callbacks: ( event_name, callback, context )
  		this.plupload.bind('FilesAdded', this.onFilesAdded, this);
  		this.plupload.bind('UploadProgress', this.onUploadProgress, this);
  		this.plupload.bind('FileUploaded', this.onFileUploaded, this);
  	},

  	/**
    * Fired after files have been selected from the dialog
    *
    * @param up
    * @param files
    */
  	onFilesAdded: function onFilesAdded(up, files) {
  		var model, collection, view;

  		// Assemble the collection data for the file queue
  		collection = new Backbone.Collection();
  		jQuery.each(files, function (index, file) {
  			model = new FileUploadQueueModel({
  				id: file.id,
  				filename: file.name
  			});

  			collection.add(model);
  		});

  		// Create a new view based on the collection
  		view = new FileUploadQueue({ collection: collection });
  		view.render(); // Generate the HTML, not attached to the DOM yet

  		// Reset the region in case any error messages are hanging around from a previous upload
  		// and show the new file upload queue
  		this.ui_region.reset();
  		this.ui_region.show(view);

  		// Stash references
  		this.queue_collection = collection;

  		up.refresh();
  		up.start();
  	},

  	/**
    *
    * @param up
    * @param file
    */
  	onUploadProgress: function onUploadProgress(up, file) {
  		var model = this.queue_collection.get(file.id);
  		model.set({ progress: file.percent });
  	},

  	/**
    *
    * @param up
    * @param file
    * @param resp
    */
  	onFileUploaded: function onFileUploaded(up, file, resp) {
  		var response = resp.response,
  		    new_file = [],
  		    model = this.queue_collection.get(file.id);

  		// Error condition 1
  		if ("Error: " == resp.response.substr(0, 7)) {
  			response = response.substr(7);
  			if (window.console) {
  				console.log(response);
  			}

  			model.set({
  				progress: 0,
  				error_msg: response
  			});
  		}
  		// Error condition 2
  		else if ("<e>" == resp.response.substr(0, 3)) {
  				response = jQuery(response).text(); // Strip tags, text only
  				if (window.console) {
  					console.log(response);
  				}

  				model.set({
  					progress: 0,
  					error_msg: response
  				});
  			} else {
  				var json = response.match(/{.*}$/);

  				if (null !== json && 0 < json.length) {
  					json = jQuery.parseJSON(json[0]);
  				} else {
  					json = {};
  				}

  				if ('object' != (typeof json === 'undefined' ? 'undefined' : babelHelpers.typeof(json)) || jQuery.isEmptyObject(json)) {
  					if (window.console) {
  						console.log(response);
  					}
  					if (window.console) {
  						console.log(json);
  					}

  					model.set({
  						progress: 0,
  						error_msg: 'There was an issue with the file upload, please try again.'
  					});
  					return;
  				}

  				new_file = {
  					id: json.ID,
  					icon: json.thumbnail,
  					name: json.post_title,
  					link: json.link
  				};

  				// Remove the file from the upload queue model and trigger an event for the hosting container
  				model.trigger('destroy', model);
  				this.trigger('added:files', new_file);
  			}
  	},

  	// This should never be called as plupload intercepts the button click event itself
  	invoke: function invoke() {
  		return;
  	}

  });

  var MediaModal = PodsFileUploader.extend({
  	media_object: {},

  	fileUploader: 'attachment',

  	invoke: function invoke() {

  		if (wp.Uploader.defaults.filters.mime_types === undefined) {
  			wp.Uploader.defaults.filters.mime_types = [{ title: 'Allowed Files', extensions: '*' }];
  		}

  		var default_ext = wp.Uploader.defaults.filters.mime_types[0].extensions;

  		wp.Uploader.defaults.filters.mime_types[0].extensions = this.field_options.limit_extensions;

  		// set our settings
  		this.media_object = wp.media({
  			title: this.field_options.file_modal_title,
  			multiple: 1 != this.field_options.file_limit,
  			library: {
  				type: this.field_options.limit_types
  			},
  			// Customize the submit button.
  			button: {
  				// Set the text of the button.
  				text: this.field_options.file_modal_add_button
  			}
  		});

  		// One-shot callback ( event, callback, context )
  		this.media_object.once('select', this.onMediaSelect, this);

  		// open the frame
  		this.media_object.open();
  		this.media_object.content.mode(this.field_options.file_attachment_tab);

  		// Reset the allowed file extensions
  		wp.Uploader.defaults.filters.mime_types[0].extensions = default_ext;
  	},

  	onMediaSelect: function onMediaSelect() {
  		var new_files = [];
  		var selection = this.media_object.state().get('selection');

  		if (!selection) {
  			return;
  		}

  		// loop through the selected files
  		selection.each(function (attachment) {
  			var attachment_thumbnail;
  			var sizes = attachment.attributes.sizes;

  			// by default use the generic icon
  			attachment_thumbnail = attachment.attributes.icon;

  			// only thumbnails have sizes which is what we're on the hunt for
  			if (sizes !== undefined) {
  				// Get thumbnail if it exists
  				if (sizes.thumbnail !== undefined && sizes.thumbnail.url !== undefined) {
  					attachment_thumbnail = sizes.thumbnail.url;
  				} // If thumbnail doesn't exist, get full because this is a small image
  				else if (sizes.full !== undefined && sizes.full.url !== undefined) {
  						attachment_thumbnail = sizes.full.url;
  					}
  			}

  			new_files.push({
  				id: attachment.attributes.id,
  				icon: attachment_thumbnail,
  				name: attachment.attributes.title,
  				link: attachment.attributes.url
  			});
  		});

  		// Fire an event with an array of models to be added
  		this.trigger('added:files', new_files);
  	}

  });

  var Uploaders = [Plupload, MediaModal];

  var FileUpload = Mn.LayoutView.extend({
  	template: _.template(fileUploadLayout),

  	regions: {
  		list: '.pods-ui-file-list',
  		ui_region: '.pods-ui-region', // "Utility" container for uploaders to use
  		form: '.pods-ui-form'
  	},

  	uploader: {},

  	onRender: function onRender() {
  		var listView = new FileUploadList({ collection: this.collection, fieldModel: this.model });
  		var formView = new FileUploadForm({ fieldModel: this.model });

  		this.showChildView('list', listView);
  		this.showChildView('form', formView);

  		// Setup the uploader and listen for a response event
  		this.uploader = this.createUploader();
  		this.listenTo(this.uploader, 'added:files', this.onAddedFiles);
  	},

  	/**
    * Fired by a remove:file:click trigger in any child view
    *
    * @param childView View that was the source of the event
    */
  	onChildviewRemoveFileClick: function onChildviewRemoveFileClick(childView) {
  		this.collection.remove(childView.model);
  	},

  	/**
    * Fired by a add:file:click trigger in any child view
    *
    * plupload fields should never generate this event as it places a shim over our button and handles the event
    * internally
    */
  	onChildviewAddFileClick: function onChildviewAddFileClick() {
  		// Invoke the uploader
  		this.uploader.invoke();
  	},

  	/**
    * Concrete uploader implementations simply need to: this.trigger( 'added:files', new_files )
    *
    * @param {Object[]} data An array of model objects to be added
    */
  	onAddedFiles: function onAddedFiles(data) {
  		this.collection.add(data);
  	},

  	createUploader: function createUploader() {
  		var options = this.model.get('options');
  		var targetUploader = options['file_uploader'];
  		var Uploader = undefined;

  		var _iteratorNormalCompletion = true;
  		var _didIteratorError = false;
  		var _iteratorError = undefined;

  		try {
  			for (var _iterator = Uploaders[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
  				var thisUploader = _step.value;

  				if (targetUploader === thisUploader.prototype.fileUploader) {
  					Uploader = thisUploader;
  					break;
  				}
  			}
  		} catch (err) {
  			_didIteratorError = true;
  			_iteratorError = err;
  		} finally {
  			try {
  				if (!_iteratorNormalCompletion && _iterator.return) {
  					_iterator.return();
  				}
  			} finally {
  				if (_didIteratorError) {
  					throw _iteratorError;
  				}
  			}
  		}

  		if (Uploader !== undefined) {
  			this.uploader = new Uploader({
  				// We provide regular DOM element for the button
  				browse_button: this.getRegion('form').getEl('.pods-file-add').get(),
  				ui_region: this.getRegion('ui_region'),
  				field_options: options
  			});
  			return this.uploader;
  		} else {
  			throw "Could not locate file uploader '" + targetUploader + "'";
  		}
  	}

  });

  var pickLayout = "<div class=\"pods-pick-values\"></div>\n<div class=\"view-selector\"></div>";

  /*global jQuery, _, Backbone, Mn */

  /**
   *
   */
  var RelationshipModel = Backbone.Model.extend({
  	defaults: {
  		'id': 0,
  		'name': '',
  		'icon': '',
  		'selected': false
  	},

  	toggleSelected: function toggleSelected() {
  		this.set('selected', !this.get('selected'));
  	}
  });

  /**
   *
   */
  var RelationshipCollection = Backbone.Collection.extend({
  	model: RelationshipModel,

  	/**
    *
    * @param { ?string[] } ids
    */
  	setSelected: function setSelected(ids) {
  		this.map(function (thisModel) {
  			var selected = _.contains(ids, thisModel.get('id') + '');
  			thisModel.set('selected', selected);
  		});
  	},

  	/**
    * Return a new collection containing just the selected items in this one
    *
    * @returns {*}
    */
  	filterSelected: function filterSelected() {

  		// Get an array with only the selected items
  		var filtered = this.filter(function (item_model) {
  			return item_model.get('selected');
  		});

  		// this.filter is going to return an array, so create a collection out of it
  		return new RelationshipCollection(filtered);
  	}
  });

  var viewSelectorTemplate = "<span class=\"checkbox\" style=\"background-color: #c7def8; display: inline-block; padding: 5px 10px; margin: 10px 0; border-radius: 4px; cursor: pointer;\">\n\tCheckbox\n</span>\n<span class=\"select\" style=\"background-color: #c7def8; display: inline-block; padding: 5px 10px; margin: 10px 0; border-radius: 4px; cursor: pointer;\">\n\tSelect\n</span>";

  var PickViewSelector = Mn.LayoutView.extend({
  	template: _.template(viewSelectorTemplate),

  	ui: {
  		checkbox: '.checkbox',
  		select: '.select'
  	},

  	triggers: {
  		'click @ui.checkbox': 'checkbox:view:click',
  		'click @ui.select': 'select:view:click'
  	}
  });

  var checkboxItem = "<div class=\"pods-field pods-boolean\">\n\t<input\n\t\tname=\"<%- attr.name %>[<%= ordinal %>]\"\n\t\t<%= selected ? 'checked=\"checked\"' : '' %>\n\t\tdata-name-clean=\"<%- attr.name_clean %>\"\n\t\tdata-label=\"<%- options.label %>\"\n\t\tid=\"<%- attr.id %><%= ordinal %>\"\n\t\tclass=\"pods-form-ui-field-type-pick\"\n\t\ttype=\"checkbox\" tabindex=\"2\" value=\"<%- id %>\">\n\t<label class=\"pods-form-ui-label\" for=\"<%- attr.id %><%= ordinal %>\">\n\t\t<%= name %>\n\t</label>\n</div>\n";

  /**
   *
   */
  var CheckboxItem = PodsFieldView.extend({
  	tagName: 'li',

  	template: _.template(checkboxItem),

  	className: 'pods-pick',

  	ui: {
  		checkbox: 'input.pods-form-ui-field-type-pick'
  	},

  	triggers: {
  		'click @ui.checkbox': 'toggle:selected'
  	},

  	modelEvents: {
  		'change': 'modelChanged'
  	},

  	templateHelpers: function templateHelpers() {
  		return {
  			ordinal: this.model.collection.indexOf(this.model)
  		};
  	},

  	modelChanged: function modelChanged() {
  		this.render();
  	},

  	onToggleSelected: function onToggleSelected() {
  		this.model.toggleSelected();
  	}

  });

  /**
   *
   */
  var CheckboxView = PodsFieldListView.extend({
  	tagName: 'ul',

  	childView: CheckboxItem
  });

  /**
   *
   */
  var SelectItem = PodsFieldView.extend({
  	tagName: 'option',

  	template: false,

  	initialize: function initialize() {
  		this.$el.val(this.model.get('id'));

  		this.$el.html(this.model.get('name'));

  		if (this.model.get('selected')) {
  			this.$el.prop('selected', 'selected');
  		}
  	}
  });

  /**
   *
   */
  var SelectView = PodsFieldListView.extend({
  	tagName: 'select',

  	childView: SelectItem,

  	triggers: {
  		'change': 'change:selected'
  	},

  	attributes: function attributes() {
  		var fieldModel = this.options.fieldModel;
  		var fieldAttributes = fieldModel.get('attributes');
  		var fieldOptions = fieldModel.get('options');

  		return {
  			'name': fieldAttributes.name + '[]',
  			'class': fieldAttributes.class,
  			'data-name-clean': fieldAttributes['name_clean'],
  			'id': fieldAttributes.id,
  			'tabindex': '2',
  			'multiple': fieldOptions['pick_format_type']
  		};
  	},

  	onChangeSelected: function onChangeSelected() {
  		this.collection.setSelected(this.$el.val());
  	}
  });

  var Pick = Mn.LayoutView.extend({
  	template: _.template(pickLayout),

  	regions: {
  		viewSelector: '.view-selector',
  		list: '.pods-pick-values'
  	},

  	onRender: function onRender() {
  		var view = new CheckboxView({ collection: this.collection, fieldModel: this.model });
  		this.showChildView('list', view);
  		this.showChildView('viewSelector', new PickViewSelector({}));
  	},

  	/**
    * Fun for testing
    */
  	onChildviewCheckboxViewClick: function onChildviewCheckboxViewClick(childView) {
  		var view = new CheckboxView({ collection: this.collection, fieldModel: this.model });
  		this.showChildView('list', view);
  	},

  	onChildviewSelectViewClick: function onChildviewSelectViewClick(childView) {
  		var view = new SelectView({ collection: this.collection, fieldModel: this.model });
  		this.showChildView('list', view);
  	}
  });



  var fieldClasses = Object.freeze({
  	FileUpload: FileUpload,
  	Pick: Pick
  });

  /*global jQuery, _, Backbone, Mn */
  var PodsFieldModel = Backbone.Model.extend({
  	defaults: {
  		type: 'hidden',
  		attributes: {},
  		options: {}
  	}
  });

  var app = {
  	fieldClasses: fieldClasses,
  	fields: {},
  	Queue: Queue
  };
  /**
   * This is the workhorse that currently kicks everything off
   */
  jQuery(function () {
  	jQuery('.pods-form-ui-field').pods_ui_field_init();
  });

  /**
   * Custom jQuery plugin to handle Pods Fields
   */
  jQuery.fn.pods_ui_field_init = function () {

  	return this.each(function () {
  		var data = {},
  		    field_model = undefined,
  		    field_id = undefined,
  		    field_control = undefined,
  		    field = undefined;

  		// Combine data from all in-line data scripts in the container
  		jQuery(this).find('script.data').each(function () {
  			var this_data = jQuery.parseJSON(jQuery(this).html());
  			jQuery.extend(data, this_data);
  			jQuery(this).remove();
  		});

  		// Ignore anything that doesn't have the field type set
  		if (data['field_type'] !== undefined) {

  			field_control = field_factory(data['field_type']);
  			if (field_control.control !== undefined) {
  				field_model = new PodsFieldModel({
  					type: data['field_type'],
  					attributes: data.field_meta['field_attributes'],
  					options: data.field_meta['field_options']
  				});

  				field_id = data.field_meta['field_attributes'].id;

  				field = new field_control.control({
  					el: this,
  					model: field_model,
  					collection: new field_control.collection(data['model_data'])
  				});
  				field.render();
  				app.fields[field_id] = field;
  			}
  		}
  	});
  };

  /**
   * @param {string} field_type
   */
  var field_factory = function field_factory(field_type) {
  	var field = {};

  	switch (field_type) {
  		case 'file-upload':
  			field.control = FileUpload;
  			field.collection = FileUploadCollection;
  			break;

  		case 'pick':
  			field.control = Pick;
  			field.collection = RelationshipCollection;
  			break;
  	}

  	return field;
  };

  return app;

}());